var _user$project$App$init = {
	ctor: '_Tuple2',
	_0: {
		circleYPosition: 50,
		one: {ctor: '_Tuple2', _0: 0, _1: 50},
		two: {ctor: '_Tuple2', _0: 25, _1: 20},
		three: {ctor: '_Tuple2', _0: 50, _1: 40},
		four: {ctor: '_Tuple2', _0: 75, _1: 75},
		five: {ctor: '_Tuple2', _0: 100, _1: 30},
		six: {ctor: '_Tuple2', _0: 125, _1: 50},
		seven: {ctor: '_Tuple2', _0: 150, _1: 20},
		time: 0,
		rand: 0
	},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$App$requestRandom = _elm_lang$core$Native_Platform.outgoingPort(
	'requestRandom',
	function (v) {
		return v;
	});
var _user$project$App$update = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		var _p12 = _p1.two;
		var _p11 = _p1.time;
		var _p10 = _p1.three;
		var _p9 = _p1.six;
		var _p8 = _p1.seven;
		var _p7 = _p1.rand;
		var _p6 = _p1.one;
		var _p5 = _p1.four;
		var _p4 = _p1.five;
		var _p3 = _p1.circleYPosition;
		if (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$Tuple$first(_p6),
			-25) < 0) {
			return {
				ctor: '_Tuple2',
				_0: {
					circleYPosition: _p3,
					one: {ctor: '_Tuple2', _0: 125, _1: _p7},
					two: _p12,
					three: _p10,
					four: _p5,
					five: _p4,
					six: _p9,
					seven: _p8,
					time: _p11,
					rand: _p7
				},
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			if (_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$Tuple$first(_p12),
				-25) < 0) {
				return {
					ctor: '_Tuple2',
					_0: {
						circleYPosition: _p3,
						one: _p6,
						two: {ctor: '_Tuple2', _0: 125, _1: _p7},
						three: _p10,
						four: _p5,
						five: _p4,
						six: _p9,
						seven: _p8,
						time: _p11,
						rand: _p7
					},
					_1: _elm_lang$core$Platform_Cmd$none
				};
			} else {
				if (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Tuple$first(_p10),
					-25) < 0) {
					return {
						ctor: '_Tuple2',
						_0: {
							circleYPosition: _p3,
							one: _p6,
							two: _p12,
							three: {ctor: '_Tuple2', _0: 125, _1: _p7},
							four: _p5,
							five: _p4,
							six: _p9,
							seven: _p8,
							time: _p11,
							rand: _p7
						},
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					if (_elm_lang$core$Native_Utils.cmp(
						_elm_lang$core$Tuple$first(_p5),
						-25) < 0) {
						return {
							ctor: '_Tuple2',
							_0: {
								circleYPosition: _p3,
								one: _p6,
								two: _p12,
								three: _p10,
								four: {ctor: '_Tuple2', _0: 125, _1: _p7},
								five: _p4,
								six: _p9,
								seven: _p8,
								time: _p11,
								rand: _p7
							},
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						if (_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$Tuple$first(_p4),
							-25) < 0) {
							return {
								ctor: '_Tuple2',
								_0: {
									circleYPosition: _p3,
									one: _p6,
									two: _p12,
									three: _p10,
									four: _p5,
									five: {ctor: '_Tuple2', _0: 125, _1: _p7},
									six: _p9,
									seven: _p8,
									time: _p11,
									rand: _p7
								},
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							if (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$Tuple$first(_p9),
								-25) < 0) {
								return {
									ctor: '_Tuple2',
									_0: {
										circleYPosition: _p3,
										one: _p6,
										two: _p12,
										three: _p10,
										four: _p5,
										five: _p4,
										six: {ctor: '_Tuple2', _0: 125, _1: _p7},
										seven: _p8,
										time: _p11,
										rand: _p7
									},
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								if (_elm_lang$core$Native_Utils.cmp(
									_elm_lang$core$Tuple$first(_p8),
									-25) < 0) {
									return {
										ctor: '_Tuple2',
										_0: {
											circleYPosition: _p3,
											one: _p6,
											two: _p12,
											three: _p10,
											four: _p5,
											five: _p4,
											six: _p9,
											seven: {ctor: '_Tuple2', _0: 125, _1: _p7},
											time: _p11,
											rand: _p7
										},
										_1: _elm_lang$core$Platform_Cmd$none
									};
								} else {
									var _p2 = msg;
									switch (_p2.ctor) {
										case 'MouseMsg':
											return {
												ctor: '_Tuple2',
												_0: {circleYPosition: _p3 - 10, one: _p6, two: _p12, three: _p10, four: _p5, five: _p4, six: _p9, seven: _p8, time: _p11, rand: _p7},
												_1: _elm_lang$core$Platform_Cmd$none
											};
										case 'Tick':
											return {
												ctor: '_Tuple2',
												_0: {
													circleYPosition: _p3 + 5.0e-2,
													one: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Tuple$first(_p6) - 5.0e-2,
														_1: _elm_lang$core$Tuple$second(_p6)
													},
													two: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Tuple$first(_p12) - 5.0e-2,
														_1: _elm_lang$core$Tuple$second(_p12)
													},
													three: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Tuple$first(_p10) - 5.0e-2,
														_1: _elm_lang$core$Tuple$second(_p10)
													},
													four: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Tuple$first(_p5) - 5.0e-2,
														_1: _elm_lang$core$Tuple$second(_p5)
													},
													five: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Tuple$first(_p4) - 5.0e-2,
														_1: _elm_lang$core$Tuple$second(_p4)
													},
													six: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Tuple$first(_p9) - 5.0e-2,
														_1: _elm_lang$core$Tuple$second(_p9)
													},
													seven: {
														ctor: '_Tuple2',
														_0: _elm_lang$core$Tuple$first(_p8) - 5.0e-2,
														_1: _elm_lang$core$Tuple$second(_p8)
													},
													time: _p11,
													rand: _p7
												},
												_1: _elm_lang$core$Platform_Cmd$none
											};
										case 'Tock':
											return {
												ctor: '_Tuple2',
												_0: {circleYPosition: _p3, one: _p6, two: _p12, three: _p10, four: _p5, five: _p4, six: _p9, seven: _p8, time: _p11 + 1, rand: _p7},
												_1: _user$project$App$requestRandom(0)
											};
										case 'Request':
											return {
												ctor: '_Tuple2',
												_0: {circleYPosition: _p3, one: _p6, two: _p12, three: _p10, four: _p5, five: _p4, six: _p9, seven: _p8, time: _p11, rand: _p7},
												_1: _user$project$App$requestRandom(_p2._0)
											};
										default:
											return {
												ctor: '_Tuple2',
												_0: {circleYPosition: _p3, one: _p6, two: _p12, three: _p10, four: _p5, five: _p4, six: _p9, seven: _p8, time: _p11, rand: _p2._0},
												_1: _elm_lang$core$Platform_Cmd$none
											};
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$App$receiveRandom = _elm_lang$core$Native_Platform.incomingPort('receiveRandom', _elm_lang$core$Json_Decode$float);
var _user$project$App$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {circleYPosition: a, one: b, two: c, three: d, four: e, five: f, six: g, seven: h, time: i, rand: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$App$Received = function (a) {
	return {ctor: 'Received', _0: a};
};
var _user$project$App$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _user$project$App$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '0'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(model.rand)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$svg,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$App$Request(0)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$ellipse,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$cx('50vw'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$cy(
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(model.circleYPosition),
											'vh')),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$rx('100'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$ry('180'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('none'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$line,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x1(
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(
												_elm_lang$core$Tuple$first(model.one)),
											'vw')),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y1(
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(
													_elm_lang$core$Tuple$second(model.one)),
												'vh')),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$x2(
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(
														_elm_lang$core$Tuple$first(model.one) + 25),
													'vw')),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$y2(
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(
															_elm_lang$core$Tuple$second(model.two)),
														'vh')),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$line,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$x1(
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(
													_elm_lang$core$Tuple$first(model.two)),
												'vw')),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$y1(
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(
														_elm_lang$core$Tuple$second(model.two)),
													'vh')),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$x2(
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(
															_elm_lang$core$Tuple$first(model.two) + 25),
														'vw')),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$y2(
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(
																_elm_lang$core$Tuple$second(model.three)),
															'vh')),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$line,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$x1(
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(
														_elm_lang$core$Tuple$first(model.three)),
													'vw')),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$y1(
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(
															_elm_lang$core$Tuple$second(model.three)),
														'vh')),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$x2(
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(
																_elm_lang$core$Tuple$first(model.three) + 25),
															'vw')),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$y2(
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(
																	_elm_lang$core$Tuple$second(model.four)),
																'vh')),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$line,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$x1(
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(
															_elm_lang$core$Tuple$first(model.four)),
														'vw')),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$y1(
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(
																_elm_lang$core$Tuple$second(model.four)),
															'vh')),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$x2(
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(
																	_elm_lang$core$Tuple$first(model.four) + 25),
																'vw')),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$y2(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(
																		_elm_lang$core$Tuple$second(model.five)),
																	'vh')),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$line,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$x1(
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(
																_elm_lang$core$Tuple$first(model.five)),
															'vw')),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$y1(
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(
																	_elm_lang$core$Tuple$second(model.five)),
																'vh')),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$x2(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(
																		_elm_lang$core$Tuple$first(model.five) + 25),
																	'vw')),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$y2(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_elm_lang$core$Basics$toString(
																			_elm_lang$core$Tuple$second(model.six)),
																		'vh')),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$line,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$x1(
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(
																	_elm_lang$core$Tuple$first(model.six)),
																'vw')),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$y1(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(
																		_elm_lang$core$Tuple$second(model.six)),
																	'vh')),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$x2(
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_elm_lang$core$Basics$toString(
																			_elm_lang$core$Tuple$first(model.six) + 25),
																		'vw')),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$y2(
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_elm_lang$core$Basics$toString(
																				_elm_lang$core$Tuple$second(model.one)),
																			'vh')),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$strokeWidth('10'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$App$request = function (x) {
	return _user$project$App$Request(0);
};
var _user$project$App$Tock = function (a) {
	return {ctor: 'Tock', _0: a};
};
var _user$project$App$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$App$MouseMsg = function (a) {
	return {ctor: 'MouseMsg', _0: a};
};
var _user$project$App$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$mouse$Mouse$clicks(_user$project$App$MouseMsg),
			_1: {
				ctor: '::',
				_0: _elm_lang$animation_frame$AnimationFrame$times(_user$project$App$Tick),
				_1: {
					ctor: '::',
					_0: _elm_lang$animation_frame$AnimationFrame$times(_user$project$App$Tock),
					_1: {
						ctor: '::',
						_0: _user$project$App$receiveRandom(_user$project$App$Received),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$App$main = _elm_lang$html$Html$program(
	{init: _user$project$App$init, view: _user$project$App$view, update: _user$project$App$update, subscriptions: _user$project$App$subscriptions})();
